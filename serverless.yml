service: vehicle-tracking-boilerplate

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${self:custom.Environments.devEnv}
  region: eu-west-1
  iamRoleStatements:
    # TODO Fine tune if you want. This only ensure your lambda has access to every service
    - Effect: "Allow"
      Action:
        - "*"
      Resource: "*"
  environment:
    VEHICLE_STATUS_TABLE: ${self:custom.TransitTable.name}
    TRACKED_VEHICLES: ${self:custom.TrackingTable.name}

functions:
  vehicle-tracker-request:
    handler: index.requestTracker
    description: "Gets location for a vehicle given id"
    events: # events that trigger this action
      - http: # creates an API gateway endpoint
          method: GET
          path: /request/{id}

  vehicle-status-poller:
    handler: index.startPolling
    description: "polls vehicle location"
    events: # events that trigger this action
      - http: # creates an API gateway endpoint
          method: GET
          path: /poll/

  vehicle-status-retrieve:
    handler: index.getVehicleStatus
    description: "Retrieves location of a vehicle"
    events: # events that trigger this action
      - http: # creates an API gateway endpoint
          method: GET
          path: /retreive/{id}

package:
  exclude:
    - "node_modules/aws-sdk/**"

custom:
  webpack:
    webpackConfig: "webpack.config.js" # Name of webpack configuration file
    includeModules: false # Node modules configuration for packaging
    packager: "npm" # Packager that will be used to package your external modules
    excludeFiles: src/**/*.test.js # Provide a glob for files to ignore
  TransitTable:
    name: !Ref VehicleStatusTable
    arn: !GetAtt VehicleStatusTable.Arn
  TrackingTable:
    name: !Ref TrackedVehicles
    arn: !GetAtt TrackedVehicles.Arn
  Environments:
    devEnv: dev

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-vpc-plugin

resources:
  Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        EnableDnsSupport: true
        EnableDnsHostnames: false
        CidrBlock: "20.0.0.0/16"

      # internet gateway
    InternetGateway:
      Type: AWS::EC2::InternetGateway
    AttachGateway: # attach vpc to internet gateway, they both have to be created
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

    # A NAT Gateway:
    NATGateway:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt ElasticIPAddress.AllocationId
        SubnetId: !Ref PublicSubnetOne
        Tags:
          - Key: Name
            Value: "gate way"
    ElasticIPAddress:
      Type: AWS::EC2::EIP
      Properties:
        Domain: VPC

    # Two public subnets where load balancer and NAT gateway will run
    PublicSubnetOne:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: "eu-west-1a"
        VpcId: !Ref VPC
        CidrBlock: "20.0.1.0/24"
        Tags:
          - Key: Name
            Value: "subnet 1 public"
    PublicSubnetTwo:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: "eu-west-1b"
        VpcId: !Ref VPC
        CidrBlock: "20.0.2.0/24"
        Tags:
          - Key: Name
            Value: "subnet 2 public"

    # Two private subnets, where containers will run
    PrivateSubnetOne:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: "eu-west-1a"
        VpcId: !Ref VPC
        CidrBlock: "20.0.3.0/24"
        Tags:
          - Key: Name
            Value: "subnet 1 private"

    PrivateSubnetTwo:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: "eu-west-1b"
        VpcId: !Ref VPC
        CidrBlock: "20.0.4.0/24"
        Tags:
          - Key: Name
            Value: "subnet 2 private"

    PublicRouteTable: # create route table
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC # point to vpc
        Tags:
          - Key: Name
            Value: Public

    PublicRoute: # public route table definition
      Type: AWS::EC2::Route
      DependsOn: AttachGateway # has to finish creating before this is accessed
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    PrivateRouteTable: # private route table definition
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: Private

    PrivateRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref "PublicRouteTable"
        DestinationCidrBlock: "0.0.0.0/0"
        NatGatewayId: !Ref NATGateway

    # subnet associations to route tables
    PublicSubnetOneRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnetOne
        RouteTableId: !Ref PublicRouteTable
    PublicSubnetTwoRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnetTwo
        RouteTableId: !Ref PublicRouteTable
    PrivateSubnetOneRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnetOne
        RouteTableId: !Ref PrivateRouteTable
    PrivateSubnetTwoRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnetTwo
        RouteTableId: !Ref PrivateRouteTable

    VehicleStatusTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Transit-Table-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    TrackedVehicles:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: TrackedVehicles-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
